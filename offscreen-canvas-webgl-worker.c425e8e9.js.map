{"version":3,"sources":["../scripts/utilities.js","../scripts/offscreen-worker.js","../scripts/offscreen-canvas-webgl-worker.js"],"names":["scale","domain","range","domainLength","slope","intercept","x","loadShader","gl","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","deleteShader","initShaderProgram","vertexSource","fragmentSource","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","componentToHex","c","hex","toString","length","rgbToHex","r","g","b","parseInt","Number","OffscreenWorker","data","canvas","width","height","receiveState","minX","maxX","minY","maxY","currentXRange","currentYRange","count","controls","needsAnimation","postMessage","self","e","engine","render","log","OffscreenCanvasWebGLWorker","getContext","lastFrame","requestAnimationFrame","animate","bind","tick","clearColor","clear","COLOR_BUFFER_BIT","bindBuffer","ARRAY_BUFFER","positionBuffer","vertexAttribPointer","programInfo","attribLocations","vertexPosition","FLOAT","enableVertexAttribArray","useProgram","program","uniform1f","uniformLocations","gridSize","Math","sqrt","value","uniform4fv","viewport","getParameter","VIEWPORT","drawArrays","TRIANGLES","vertexCount","getWebGLViewport","trueBoxWidth","trueBoxHeight","getAttribLocation","getUniformLocation","createBuffer","scaleX","scaleY","positions","y","push","bufferData","Float32Array","STATIC_DRAW","cancelAnimationFrame","onmessage","onmessager"],"mappings":"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","file":"offscreen-canvas-webgl-worker.c425e8e9.js","sourceRoot":"../src/pages","sourcesContent":["function scale(domain, range) {\n  const domainLength = domain[1] - domain[0];\n  const rangeLength = range[1] - range[0];\n  const slope = rangeLength / domainLength;\n  const intercept = range[1] - slope * domain[1];\n  return (x) => slope * x + intercept;\n}\n\nfunction loadShader(gl, type, source) {\n  const shader = gl.createShader(type);\n\n  gl.shaderSource(shader, source);\n\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    console.error(`Could not compile shader: ${gl.getShaderInfoLog(shader)}`);\n    gl.deleteShader(shader);\n    return null;\n  }\n  return shader;\n}\n\nfunction initShaderProgram(gl, vertexSource, fragmentSource) {\n  const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vertexSource);\n  const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fragmentSource);\n\n  const shaderProgram = gl.createProgram();\n  gl.attachShader(shaderProgram, vertexShader);\n  gl.attachShader(shaderProgram, fragmentShader);\n  gl.linkProgram(shaderProgram);\n\n  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n    console.error(\n      `Unable to initialize the shader program: ${gl.getProgramInfoLog(\n        shaderProgram\n      )}`\n    );\n    return null;\n  }\n\n  return shaderProgram;\n}\n\nfunction componentToHex(c) {\n  var hex = c.toString(16);\n  return hex.length == 1 ? \"0\" + hex : hex;\n}\n\nfunction rgbToHex(r, g, b) {\n  return parseInt(\n    Number(\"0x\" + componentToHex(r) + componentToHex(g) + componentToHex(b)),\n    10\n  );\n}\n\nexport { scale, initShaderProgram, loadShader, rgbToHex };\n","class OffscreenWorker {\n  constructor(data) {\n    this.canvas = data.canvas;\n    this.width = data.canvas.width;\n    this.height = data.canvas.height;\n    this.receiveState(data);\n  }\n\n  receiveState(data) {\n    this.minX = data.minX;\n    this.maxX = data.maxX;\n    this.minY = data.minY;\n    this.maxY = data.maxY;\n    this.currentXRange = [...data.currentXRange];\n    this.currentYRange = [...data.currentYRange];\n    this.count = data.count;\n    this.controls = data.controls;\n\n    this.needsAnimation = true;\n  }\n\n  tick() {\n    postMessage({ type: \"tick\" });\n  }\n\n  animate() {}\n\n  render() {}\n\n  static onmessager(self) {\n    return (e) => {\n      switch (e.data.type) {\n        case \"init\":\n          self.engine = new this(e.data);\n          break;\n        case \"state\":\n          self.engine.receiveState(e.data);\n          break;\n        case \"render\":\n          self.engine.receiveState(e.data);\n          self.engine.render();\n          break;\n        default:\n          console.error(`Received unknown message type: ${e}`);\n      }\n    };\n  }\n}\n\nexport default OffscreenWorker;\n","import { scale, initShaderProgram } from \"./utilities\";\nimport OffscreenWorker from \"./offscreen-worker\";\n\nconsole.log(initShaderProgram);\nclass OffscreenCanvasWebGLWorker extends OffscreenWorker {\n  constructor(data) {\n    super(data);\n    this.gl = this.canvas.getContext(\"webgl\");\n\n    if (!this.gl) {\n      console.error(\"Unable to initialize WebGL!\");\n      return;\n    }\n  }\n\n  animate() {\n    if (!this.needsAnimation) {\n      this.lastFrame = requestAnimationFrame(this.animate.bind(this));\n      this.tick();\n      return;\n    }\n\n    this.gl.clearColor(0.0, 0.0, 0.0, 1.0);\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\n    this.gl.vertexAttribPointer(\n      this.programInfo.attribLocations.vertexPosition,\n      2, // numComponents\n      this.gl.FLOAT, // type\n      false, // normalize\n      0, // stride\n      0 // offset\n    );\n    this.gl.enableVertexAttribArray(\n      this.programInfo.attribLocations.vertexPosition\n    );\n\n    this.gl.useProgram(this.programInfo.program);\n\n    this.gl.uniform1f(\n      this.programInfo.uniformLocations.gridSize,\n      Math.sqrt(this.count.value) / 2\n    );\n    this.gl.uniform4fv(\n      this.programInfo.uniformLocations.viewport,\n      this.gl.getParameter(this.gl.VIEWPORT)\n    );\n\n    this.gl.drawArrays(\n      this.gl.TRIANGLES,\n      0, // stride\n      this.vertexCount // vertex count\n    );\n\n    const viewport = this.getWebGLViewport();\n\n    this.gl.viewport(viewport[0], viewport[1], viewport[2], viewport[3]);\n\n    this.needsAnimation = false;\n    this.lastFrame = requestAnimationFrame(this.animate.bind(this));\n    this.tick();\n  }\n\n  render() {\n    this.trueBoxWidth = (this.maxX - this.minX) / Math.sqrt(this.count);\n    this.trueBoxHeight = (this.maxY - this.minY) / Math.sqrt(this.count);\n\n    this.shaderProgram = initShaderProgram(\n      this.gl,\n      vertexShader,\n      fragmentShader\n    );\n\n    this.programInfo = {\n      program: this.shaderProgram,\n      attribLocations: {\n        vertexPosition: this.gl.getAttribLocation(\n          this.shaderProgram,\n          \"aVertexPosition\"\n        ),\n      },\n      uniformLocations: {\n        gridSize: this.gl.getUniformLocation(this.shaderProgram, \"uGridSize\"),\n        viewport: this.gl.getUniformLocation(this.shaderProgram, \"viewport\"),\n      },\n    };\n    this.positionBuffer = this.gl.createBuffer();\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\n\n    const scaleX = scale([this.minX, this.maxX], [-1, 1]);\n    const scaleY = scale([this.minY, this.maxY], [-1, 1]);\n    const positions = [];\n    for (let x = this.minX; x < this.maxX; x += this.trueBoxWidth) {\n      for (let y = this.minY; y < this.maxY; y += this.trueBoxHeight) {\n        positions.push(\n          scaleX(x),\n          scaleY(y),\n          scaleX(x + this.trueBoxWidth),\n          scaleY(y),\n          scaleX(x + this.trueBoxWidth),\n          scaleY(y + this.trueBoxHeight)\n        );\n\n        positions.push(\n          scaleX(x),\n          scaleY(y),\n          scaleX(x),\n          scaleY(y + this.trueBoxHeight),\n          scaleX(x + this.trueBoxWidth),\n          scaleY(y + this.trueBoxHeight)\n        );\n      }\n    }\n\n    this.vertexCount = positions.length / 2;\n\n    this.gl.bufferData(\n      this.gl.ARRAY_BUFFER,\n      new Float32Array(positions),\n      this.gl.STATIC_DRAW\n    );\n\n    if (this.lastFrame) {\n      // Avoid overlapping animation requests\n      cancelAnimationFrame(this.lastFrame);\n    }\n    this.needsAnimation = true;\n    this.animate();\n  }\n}\n\nself.onmessage = OffscreenCanvasWebGLWorker.onmessager(self);\n"]}