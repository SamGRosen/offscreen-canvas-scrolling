{"version":3,"sources":["../scripts/drawer.js","../scripts/utilities.js","../scripts/webgl.js","../scripts/canvas-webgl-drawer.js","../scripts/offscreen-canvas-webgl-worker.js"],"names":["Drawer","data","canvas","width","height","receiveState","minX","maxX","minY","maxY","currentXRange","currentYRange","count","controls","needsAnimation","scale","domain","range","domainLength","slope","intercept","x","loadShader","gl","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","deleteShader","initShaderProgram","vertexSource","fragmentSource","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","componentToHex","c","hex","toString","length","rgbToHex","r","g","b","parseInt","Number","createMessanger","clazz","self","e","drawer","render","WebGLCanvasDrawer","getContext","lastFrame","requestAnimationFrame","animate","bind","tick","clearColor","clear","COLOR_BUFFER_BIT","viewport","getWebGLViewport","uniform4fv","programInfo","uniformLocations","getParameter","VIEWPORT","drawArrays","TRIANGLES","vertexCount","trueBoxWidth","Math","sqrt","value","trueBoxHeight","program","attribLocations","vertexPosition","getAttribLocation","gridSize","getUniformLocation","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","scaleX","scaleY","positions","y","push","bufferData","Float32Array","STATIC_DRAW","vertexAttribPointer","FLOAT","enableVertexAttribArray","useProgram","uniform1f","cancelAnimationFrame","windowWidth","windowHeight","displayAsIfThisWide","displayAsIfThisHigh","scaleXWindowSpace","scaleYWindowSpace","OffscreenWebGLCanvasDrawer","postMessage","onmessage"],"mappings":"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","file":"offscreen-canvas-webgl-worker.cd51395b.js","sourceRoot":"../src/pages","sourcesContent":["class Drawer {\n  constructor(data) {\n    this.canvas = data.canvas;\n    this.width = data.canvas.width;\n    this.height = data.canvas.height;\n    this.receiveState(data);\n  }\n\n  receiveState(data) {\n    this.minX = data.minX;\n    this.maxX = data.maxX;\n    this.minY = data.minY;\n    this.maxY = data.maxY;\n    this.currentXRange = [...data.currentXRange];\n    this.currentYRange = [...data.currentYRange];\n    this.count = data.count;\n    this.controls = data.controls;\n\n    this.needsAnimation = true;\n  }\n\n  tick() {}\n\n  animate() {}\n\n  render() {}\n}\n\nexport default Drawer;\n","function scale(domain, range) {\n  const domainLength = domain[1] - domain[0];\n  const rangeLength = range[1] - range[0];\n  const slope = rangeLength / domainLength;\n  const intercept = range[1] - slope * domain[1];\n  return (x) => slope * x + intercept;\n}\n\nfunction loadShader(gl, type, source) {\n  const shader = gl.createShader(type);\n\n  gl.shaderSource(shader, source);\n\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    console.error(`Could not compile shader: ${gl.getShaderInfoLog(shader)}`);\n    gl.deleteShader(shader);\n    return null;\n  }\n  return shader;\n}\n\nfunction initShaderProgram(gl, vertexSource, fragmentSource) {\n  const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vertexSource);\n  const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fragmentSource);\n\n  const shaderProgram = gl.createProgram();\n  gl.attachShader(shaderProgram, vertexShader);\n  gl.attachShader(shaderProgram, fragmentShader);\n  gl.linkProgram(shaderProgram);\n\n  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n    console.error(\n      `Unable to initialize the shader program: ${gl.getProgramInfoLog(\n        shaderProgram\n      )}`\n    );\n    return null;\n  }\n\n  return shaderProgram;\n}\n\nfunction componentToHex(c) {\n  var hex = c.toString(16);\n  return hex.length == 1 ? \"0\" + hex : hex;\n}\n\nfunction rgbToHex(r, g, b) {\n  return parseInt(\n    Number(\"0x\" + componentToHex(r) + componentToHex(g) + componentToHex(b)),\n    10\n  );\n}\n\nconst createMessanger = (clazz, self) => {\n  return (e) => {\n    switch (e.data.type) {\n      case \"init\":\n        self.drawer = new clazz(e.data);\n        break;\n      case \"state\":\n        self.drawer.receiveState(e.data);\n        break;\n      case \"render\":\n        self.drawer.receiveState(e.data);\n        self.drawer.render();\n        break;\n      default:\n        console.error(`Received unknown message type: ${e}`);\n    }\n  };\n};\n\nexport { scale, initShaderProgram, loadShader, rgbToHex, createMessanger };\n","const vertexShader = `\n  attribute vec4 aVertexPosition;\n\n  void main() {\n      gl_Position = aVertexPosition;\n  }\n`;\n\nconst fragmentShader = `\n  precision mediump float;\n  uniform float uGridSize;\n  uniform vec4 viewport;\n  void main() {\n    vec4 ndcPos;\n    // Reverse calculations from window space to clip space (normalized device coordinates)\n    ndcPos.xy = ((2.0 * gl_FragCoord.xy) - (2.0 * viewport.xy)) / (viewport.zw) - 1.0;\n    ndcPos.xy = ndcPos.xy - mod(ndcPos.xy, 1.0 / uGridSize);\n    gl_FragColor = vec4(ndcPos.x/2.0 + 0.5 , 0, ndcPos.y/2.0 + 0.5, 1.0);\n  }\n`;\n\nexport { vertexShader, fragmentShader };\n","import Drawer from \"./drawer\";\nimport { scale, initShaderProgram } from \"./utilities\";\nimport { vertexShader, fragmentShader } from \"./webgl.js\";\n\n// Largely taken from\n// https://github.com/mdn/webgl-examples/blob/gh-pages/tutorial/sample2/webgl-demo.js\n\nclass WebGLCanvasDrawer extends Drawer {\n  constructor(data) {\n    super(data);\n\n    this.gl = this.canvas.getContext(\"webgl\");\n\n    if (!this.gl) {\n      console.error(\"Unable to initialize WebGL!\");\n      return;\n    }\n  }\n\n  animate() {\n    if (!this.needsAnimation) {\n      this.lastFrame = requestAnimationFrame(this.animate.bind(this));\n      this.tick();\n      return;\n    }\n\n    this.gl.clearColor(0.0, 0.0, 0.0, 1.0);\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n\n    const viewport = this.getWebGLViewport();\n\n    this.gl.viewport(viewport[0], viewport[1], viewport[2], viewport[3]);\n\n    this.gl.uniform4fv(\n      this.programInfo.uniformLocations.viewport,\n      this.gl.getParameter(this.gl.VIEWPORT)\n    );\n\n    this.gl.drawArrays(\n      this.gl.TRIANGLES,\n      0, // stride\n      this.vertexCount // vertex count\n    );\n\n    this.needsAnimation = false;\n    this.lastFrame = requestAnimationFrame(this.animate.bind(this));\n    this.tick();\n  }\n\n  render() {\n    this.trueBoxWidth = (this.maxX - this.minX) / Math.sqrt(this.count.value);\n    this.trueBoxHeight = (this.maxY - this.minY) / Math.sqrt(this.count.value);\n\n    this.shaderProgram = initShaderProgram(\n      this.gl,\n      vertexShader,\n      fragmentShader\n    );\n\n    this.programInfo = {\n      program: this.shaderProgram,\n      attribLocations: {\n        vertexPosition: this.gl.getAttribLocation(\n          this.shaderProgram,\n          \"aVertexPosition\"\n        ),\n      },\n      uniformLocations: {\n        gridSize: this.gl.getUniformLocation(this.shaderProgram, \"uGridSize\"),\n        viewport: this.gl.getUniformLocation(this.shaderProgram, \"viewport\"),\n      },\n    };\n    this.positionBuffer = this.gl.createBuffer();\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\n\n    const scaleX = scale([this.minX, this.maxX], [-1, 1]);\n    const scaleY = scale([this.minY, this.maxY], [-1, 1]);\n    const positions = [];\n    for (let x = this.minX; x < this.maxX; x += this.trueBoxWidth) {\n      for (let y = this.minY; y < this.maxY; y += this.trueBoxHeight) {\n        positions.push(\n          scaleX(x),\n          scaleY(y),\n          scaleX(x + this.trueBoxWidth),\n          scaleY(y),\n          scaleX(x + this.trueBoxWidth),\n          scaleY(y + this.trueBoxHeight)\n        );\n\n        positions.push(\n          scaleX(x),\n          scaleY(y),\n          scaleX(x),\n          scaleY(y + this.trueBoxHeight),\n          scaleX(x + this.trueBoxWidth),\n          scaleY(y + this.trueBoxHeight)\n        );\n      }\n    }\n\n    this.vertexCount = positions.length / 2;\n\n    this.gl.bufferData(\n      this.gl.ARRAY_BUFFER,\n      new Float32Array(positions),\n      this.gl.STATIC_DRAW\n    );\n\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\n    this.gl.vertexAttribPointer(\n      this.programInfo.attribLocations.vertexPosition,\n      2, // numComponents\n      this.gl.FLOAT, // type\n      false, // normalize\n      0, // stride\n      0 // offset\n    );\n    this.gl.enableVertexAttribArray(\n      this.programInfo.attribLocations.vertexPosition\n    );\n\n    this.gl.useProgram(this.programInfo.program);\n\n    this.gl.uniform1f(\n      this.programInfo.uniformLocations.gridSize,\n      Math.sqrt(this.count.value) / 2\n    );\n\n    if (this.lastFrame) {\n      cancelAnimationFrame(this.lastFrame);\n    }\n    this.needsAnimation = true;\n    this.animate();\n  }\n\n  getWebGLViewport() {\n    // Calculate appropriate webgl viewport given current selection window\n    const windowWidth = this.currentXRange[1] - this.currentXRange[0];\n    const windowHeight = this.currentYRange[1] - this.currentYRange[0];\n\n    const displayAsIfThisWide =\n      ((this.maxX - this.minX) / windowWidth) * this.width;\n    const displayAsIfThisHigh =\n      ((this.maxY - this.minY) / windowHeight) * this.height;\n\n    const scaleXWindowSpace = scale(\n      [this.minX, this.maxX],\n      [0, -displayAsIfThisWide]\n    );\n    const scaleYWindowSpace = scale(\n      [this.minY, this.maxY],\n      [0, -displayAsIfThisHigh]\n    );\n\n    const toReturnX = scaleXWindowSpace(this.currentXRange[0]);\n    const toReturnY = scaleYWindowSpace(this.currentYRange[0]);\n\n    return [toReturnX, toReturnY, displayAsIfThisWide, displayAsIfThisHigh];\n  }\n}\n\nexport default WebGLCanvasDrawer;\n","import WebGLCanvasDrawer from \"./canvas-webgl-drawer\";\nimport { createMessanger } from \"./utilities\";\n\nclass OffscreenWebGLCanvasDrawer extends WebGLCanvasDrawer {\n  tick() {\n    postMessage({ type: \"tick\" });\n  }\n}\n\nself.onmessage = createMessanger(OffscreenWebGLCanvasDrawer, self);\n"]}