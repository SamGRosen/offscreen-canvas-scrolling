{"version":3,"sources":["../scripts/utilities.js","../scripts/offscreen-worker.js","../scripts/offscreen-canvas-worker.js"],"names":["scale","domain","range","domainLength","rangeLength","slope","intercept","x","loadShader","gl","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","deleteShader","initShaderProgram","vertexSource","fragmentSource","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","componentToHex","c","hex","toString","length","rgbToHex","r","g","b","parseInt","Number","OffscreenWorker","data","canvas","width","height","receiveState","minX","maxX","minY","maxY","currentXRange","currentYRange","count","controls","needsAnimation","postMessage","self","e","log","engine","render","OffscreenCanvasWorker","ctx","getContext","lastFrame","requestAnimationFrame","animate","bind","tick","clearRect","scaleX","scaleY","currBoxWidth","trueBoxWidth","currBoxHeight","trueBoxHeight","gridStartX","gridEndX","gridStartY","gridEndY","currX","currY","fillStyle","scaleRed","scaleBlue","fillRect","Math","sqrt","cancelAnimationFrame","onmessage","onmessager"],"mappings":";;AEAA;;AACA;;;;;;AFDA,SAASA,KAAT,CAAeC,MAAf,EAAuBC,KAAvB,EAA8B;AAC5B,MAAMC,YAAY,GAAGF,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAvC;AACA,MAAMG,WAAW,GAAGF,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAApC;AACA,MAAMG,KAAK,GAAGD,WAAW,GAAGD,YAA5B;AACA,MAAMG,SAAS,GAAGJ,KAAK,CAAC,CAAD,CAAL,GAAWG,KAAK,GAAGJ,MAAM,CAAC,CAAD,CAA3C;AACA,SAAO,UAACM,CAAD;AAAA,WAAOF,KAAK,GAAGE,CAAR,GAAYD,SAAnB;AAAA,GAAP;AACD;;AAED,SAASE,UAAT,CAAoBC,EAApB,EAAwBC,IAAxB,EAA8BC,MAA9B,EAAsC;AACpC,MAAMC,MAAM,GAAGH,EAAE,CAACI,YAAH,CAAgBH,IAAhB,CAAf;AAEAD,EAAAA,EAAE,CAACK,YAAH,CAAgBF,MAAhB,EAAwBD,MAAxB;AAEAF,EAAAA,EAAE,CAACM,aAAH,CAAiBH,MAAjB;;AAEA,ICfImC,EDeA,CAACtC,EAAE,CAACO,kBAAH,CAAsBJ,MAAtB,EAA8BH,EAAE,CAACQ,cAAjC,CAAL,EAAuD;AACrDC,IAAAA,OAAO,CAACC,KAAR,qCAA2CV,EAAE,CAACW,gBAAH,CAAoBR,MAApB,CAA3C;AACAH,IAAAA,EAAE,CAACY,YAAH,CAAgBT,MAAhB;AChBF,ADiBE,WAAO,IAAP,YCjBUoC,IAAZ,EAAkB;AAAA,ADkBjB;AEhBH9B,OAAO,CAAC+C,GAAR,CAAY,EAAZ;ADDI,ADkBF,SClBOhB,ADkBArC,MClBL,ADkBF,GClBgBoC,IAAI,CAACC,MAAnB;AACA,ADkBH,IEjBKmB,KDDGlB,KAAL,GAAaF,IAAI,CAACC,MAAL,CAAYC,KAAzB;AACA,SAAKC,MAAL,GAAcH,IAAI,CAACC,MAAL,CAAYE,MAA1B;AACA,ADkBJ,SClBSC,ADkBA9B,YClBL,CAAkB0B,IAAlB,ADkBJ,CAA2BvC,EAA3B,EAA+Bc,YAA/B,EAA6CC,cAA7C,EAA6D;ACjB1D,ADkBD,MAAMC,YAAY,GAAGjB,UAAU,CAACC,EAAD,EAAKA,EAAE,CAACiB,aAAR,EAAuBH,YAAvB,CAA/B;AACA,MAAMI,cAAc,GAAGnB,UAAU,CAACC,EAAD,EAAKA,EAAE,CAACmB,eAAR,EAAyBJ,cAAzB,CAAjC;AAEA,MAAMK,aAAa,GAAGpB,EAAE,CAACqB,aAAH,EAAtB;AACArB,EAAAA,EAAE,CAACsB,YAAH,CAAgBF,aAAhB,EAA+BJ,YAA/B;AEvBA,AFwBAhB,EAAAA,EAAE,CAACsB,MCrBH,MDqBA,CAAgBF,aAAhB,EExBYmB,ADGCA,ADqBkBrB,IExB/B,ADGA,ECHkB,ADGC,QDqBnB;AExBkB,ADIhB,ADqBFlB,EAAAA,EAAE,CAACuB,MCrBIqB,IAAL,CDqBF,CAAexB,CCrBDmB,IAAI,CAACK,IAAjB,GDqBF;ACpBE,WAAKC,IAAL,GAAYN,IAAI,CAACM,IAAjB;ACLgB,ADMhB,ADqBF,MAAI,CAAC7C,EAAE,CAACwB,CCrBDsB,IAAL,GAAYP,IAAI,CAACO,IAAjB,EDqBG,CAAuB1B,aAAvB,EAAsCpB,EAAE,CAACyB,WAAzC,CAAL,EAA4D;ACpB1D,ADqBAhB,IAAAA,OCrBKsC,ADqBE,CAACrC,GCrBR,EDqBA,CCrBY6B,IAAI,CAACQ,IAAjB,0CDsB8C/C,EAAE,CAAC0B,iBAAH,CAC1CN,aAD0C,CAD9C;AE3BA,ADOA,ADyBA,WCzBK4B,ADyBE,IAAP,SCzBA,MCPMT,IAAN,YDOyBA,IAAI,CAACS,aAA9B;ACNA,ADOA,ADyBD,UEhCMY,CDOAX,ECPL,GAAW,MAAKT,EDOhB,ICPW,CAAYqB,UAAZ,CAAuB,IAAvB,CAAX,CDOyBtB,IAAI,CAACU,aAA9B;ACTgB,ADUhB,WAAKC,KAAL,GAAaX,IAAI,CAACW,KAAlB;ACPD,ADQC,ADyBF,SAAO9B,ECzBA+B,QAAL,GAAgBZ,ADyBlB,ICzBsB,CAACY,QAArB;AAEA,ADwBH,WCxBQC,cAAL,GAAsB,IAAtB;AACD;ADyBH,SAASzB,cAAT,CAAwBC,CAAxB,EAA2B;AACzB,MAAIC,GAAG,EEnCP,CFmCUD,CAAC,CAACE,QAAF,CAAW,EAAX,CAAV,IEnCU;AACR,AFmCF,SAAOD,CEnCD,CAAC,ADUP,CDyBU,CAACE,GEnCCqB,GFmCL,IAAc,CAAd,GCzBA,ADyBkB,GEnCvB,EAA0B,CFmCGvB,GAAxB,GAA8BA,GAArC;AElCI,ADUFwB,ADyBH,MCzBGA,OCVOS,IDUI,CAAC,ICVV,GAAiBC,qBAAqB,CAAC,KAAKC,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAD,CAAtC;AACA,ADSYhE,QAAAA,IAAI,CCTXiE,CDSa,GCTlB;AACA,ADQU,AD2BhB,OC3Be,CAAX,CD2BKlC,QAAT,CAAkBC,CAAlB,EAAqBC,CAArB,EAAwBC,CAAxB,EAA2B;AElCtB,ADQF,AD2BD,SAAOC,QAAQ,CACbC,MAAM,CAAC,OAAOV,cAAc,CAACM,CAAD,CAArB,GAA2BN,cAAc,CAACO,CAAD,CAAzC,GAA+CP,cAAc,CAACQ,CAAD,CAA9D,CADO,EAEb,EAFa,CAAf;AAID;AErCG,WAAKyB,GAAL,CAASO,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,KAAK1B,KAA9B,EAAqC,KAAKC,MAA1C;AAEA,UAAM0B,CDMR,KCNc,GAAG,WDMP,CAAE,UCNW,KAAKpB,aAAX,EAA0B,CAAC,CAAD,EAAI,KAAKP,KAAT,CAA1B,CAAf;AACA,UAAM4B,MAAM,GAAG,sBAAM,KAAKpB,aAAX,EAA0B,CAAC,CAAD,EAAI,KAAKP,MAAT,CAA1B,CAAf;AAEA,UAAM4B,YAAY,GACf,CAAC,KAAKzB,IAAL,GAAY,KAAKD,IAAlB,KACE,KAAKI,aAAL,CAAmB,CAAnB,IAAwB,KAAKA,aAAL,CAAmB,CAAnB,CAD1B,CAAD,GAEA,KAAKuB,YAHP;AAKA,UAAMC,CDAR,YCAqB,GAChB,CAAC,EDDG,CAAE,ECCAzB,IAAL,GAAY,KAAKD,IAAlB,KACE,KAAKG,aAAL,CAAmB,CAAnB,IAAwB,KAAKA,aAAL,CAAmB,CAAnB,CAD1B,CAAD,GAEA,KAAKwB,aAHP,CAjBQ,CAqBR;;AACA,UAAMC,UAAU,GACd,KAAK1B,aAAL,CAAmB,CAAnB,IACC,KAAKA,aAAL,CAAmB,CAAnB,IAAwB,KAAKuB,YAD9B,GAEA,KAAKA,YAHP;AAIA,UAAMI,CDPR,OCOgB,GACZ,KAAK3B,KDRSM,IAAlB,EAAwB,ECQpB,CAAmB,CAAnB,IACC,KAAKN,aAAL,CAAmB,CAAnB,IAAwB,KAAKuB,YAD9B,GAEA,KAAKA,YAHP;AAKA,ADZsB,UCYhBK,UAAU,GACd,KAAK3B,aAAL,CAAmB,CAAnB,IACC,KAAKA,aAAL,CAAmB,CAAnB,IAAwB,KAAKwB,aAD9B,GAEA,KAAKF,YAHP;AAIA,UAAMM,QAAQ,GACZ,KAAK5B,aAAL,CAAmB,CAAnB,IACC,KAAKA,aAAL,CAAmB,CAAnB,IAAwB,KAAKwB,aAD9B,GAEA,KAAKF,YAHP,CAnCQ,CAwCR;ADpBA,aAAO,UAAChB,CAAD,EAAO;ACqBd,ADpBE9C,QAAAA,GCoBG,IAAIqE,ADpBA,CAACtB,GAAR,CCoBY,ADpBAD,CAAZ,ECoBemB,UAAjB,EAA6BI,KAAK,GAAGH,QAArC,EAA+CG,KAAK,IAAI,KAAKP,YAA7D,EAA2E;AACzE,aACE,IAAIQ,KAAK,GAAGH,UADd,EAEEG,KAAK,GAAGF,QAFV,EAGEE,KAAK,IAAI,KAAKN,aAHhB,EAIE;AACA,ADzBF,eCyBOb,CDzBCL,CAAC,CCyBP,ADzBQhB,CCyBCyC,GDzBH,CAAO/E,IAAf,CCyBE,6BACI,KAAKgF,QAAL,CAAcF,KAAd,CADJ,wCAGI,KAAKG,SAAL,CAAeJ,KAAf,CAHJ;AAIA,AD5BA,eC4BKlB,AD5BA,GC4BL,CAASuB,ED5BT,MC4BA,CACEf,MAAM,CAACU,KAAD,CADR,EAEET,MAAM,CAACU,KAAD,CAFR,EAGET,YAHF,EAIEE,aAJF;AAMD,ADjCGlB,YAAAA,IAAI,CAACG,MAAL,GAAc,IAAI,KAAJ,CAASF,CAAC,CAAChB,IAAX,CAAd;ACkCL,ADjCK;;ACmCN,ADlCI,WCkCCa,IDlCI,OAAL,GCkCJ,GAAsB,KAAtB;AACA,ADlCME,WCkCDY,CDlCCZ,GCkCN,CDlCU,CAACG,MAAL,CAAYd,YAAZ,CAAyBY,CAAC,CAAChB,IAA3B;ACmCN,ADlCM,WCkCDuB,SAAL,GAAiBC,qBAAqB,CAAC,KAAKC,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAD,CAAtC;AACD;ADlCK,eAAK,QAAL;AACEX,YAAAA,IAAI,CAACG,MAAL,CAAYd,YAAZ,CAAyBY,CAAC,CAAChB,IAA3B;AACAe,WCkCR,CDlCQA,IAAI,CAACG,MAAL,CAAYC,KCkCX,CDlCD;ACmCN,ADlCM,WCkCDa,YAAL,GAAoB,CAAC,KAAK1B,IAAL,GAAY,KAAKD,IAAlB,IAA0BwC,IAAI,CAACC,IAAL,CAAU,KAAKnC,KAAf,CAA9C;AACA,WAAKuB,aAAL,GAAqB,CAAC,KAAK1B,IAAL,GAAY,KAAKD,IAAlB,IAA0BsC,IAAI,CAACC,IAAL,CAAU,KAAKnC,KAAf,CAA/C;AACA,ADnCI,WCmCCgC,SAAL,GAAiB,sBAAM,CAAC,KAAKtC,IAAN,EAAY,KAAKC,IAAjB,CAAN,EAA8B,CAAC,CAAD,EAAI,GAAJ,CAA9B,CAAjB;AACA,ADnCMpC,WCmCDwE,CDnCCxE,OCmCN,ADnCa,CAACC,ECmCE,GDnCV,mBCmCgB,CAAC,KAAKoC,IAAN,EAAY,KAAKC,IAAjB,CAAN,CDnCsCQ,CCmCR,ADnCxC,CCmCyC,CAAD,EAAI,GAAJ,CAA9B,CAAhB;AD/CE;ACiDF,ADnCC,OAhBD,GCmDI,KAAKO,SAAT,EAAoB;AAClB,ADnCH;ACoCGwB,QAAAA,oBAAoB,CAAC,KAAKxB,SAAN,CAApB;AACD;;AACD,WAAKV,cAAL,GAAsB,IAAtB;AACA,WAAKY,OAAL;AACD,eDrCY1B;;;;EC9CqBA;;AAsFpCgB,IAAI,CAACiC,SAAL,GAAiB5B,qBAAqB,CAAC6B,UAAtB,CAAiClC,IAAjC,CAAjB","file":"offscreen-canvas-worker.802eaa34.js","sourceRoot":"../src/pages","sourcesContent":["function scale(domain, range) {\n  const domainLength = domain[1] - domain[0];\n  const rangeLength = range[1] - range[0];\n  const slope = rangeLength / domainLength;\n  const intercept = range[1] - slope * domain[1];\n  return (x) => slope * x + intercept;\n}\n\nfunction loadShader(gl, type, source) {\n  const shader = gl.createShader(type);\n\n  gl.shaderSource(shader, source);\n\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    console.error(`Could not compile shader: ${gl.getShaderInfoLog(shader)}`);\n    gl.deleteShader(shader);\n    return null;\n  }\n  return shader;\n}\n\nfunction initShaderProgram(gl, vertexSource, fragmentSource) {\n  const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vertexSource);\n  const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fragmentSource);\n\n  const shaderProgram = gl.createProgram();\n  gl.attachShader(shaderProgram, vertexShader);\n  gl.attachShader(shaderProgram, fragmentShader);\n  gl.linkProgram(shaderProgram);\n\n  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n    console.error(\n      `Unable to initialize the shader program: ${gl.getProgramInfoLog(\n        shaderProgram\n      )}`\n    );\n    return null;\n  }\n\n  return shaderProgram;\n}\n\nfunction componentToHex(c) {\n  var hex = c.toString(16);\n  return hex.length == 1 ? \"0\" + hex : hex;\n}\n\nfunction rgbToHex(r, g, b) {\n  return parseInt(\n    Number(\"0x\" + componentToHex(r) + componentToHex(g) + componentToHex(b)),\n    10\n  );\n}\n\nexport { scale, initShaderProgram, loadShader, rgbToHex };\n","class OffscreenWorker {\n  constructor(data) {\n    this.canvas = data.canvas;\n    this.width = data.canvas.width;\n    this.height = data.canvas.height;\n    this.receiveState(data);\n  }\n\n  receiveState(data) {\n    this.minX = data.minX;\n    this.maxX = data.maxX;\n    this.minY = data.minY;\n    this.maxY = data.maxY;\n    this.currentXRange = [...data.currentXRange];\n    this.currentYRange = [...data.currentYRange];\n    this.count = data.count;\n    this.controls = data.controls;\n\n    this.needsAnimation = true;\n  }\n\n  tick() {\n    postMessage({ type: \"tick\" });\n  }\n\n  animate() {}\n\n  render() {}\n\n  static onmessager(self) {\n    return (e) => {\n      console.log(e);\n      switch (e.data.type) {\n        case \"init\":\n          self.engine = new this(e.data);\n          break;\n        case \"state\":\n          self.engine.receiveState(e.data);\n          break;\n        case \"render\":\n          self.engine.receiveState(e.data);\n          self.engine.render();\n          break;\n        default:\n          console.error(`Received unknown message type: ${e}`);\n      }\n    };\n  }\n}\n\nexport default OffscreenWorker;\n","import { scale } from \"./utilities\";\nimport OffscreenWorker from \"./offscreen-worker\";\n\nconsole.log(10);\nclass OffscreenCanvasWorker extends OffscreenWorker {\n  constructor(data) {\n    super(data);\n    this.ctx = this.canvas.getContext(\"2d\");\n  }\n\n  animate() {\n    if (!this.needsAnimation) {\n      this.lastFrame = requestAnimationFrame(this.animate.bind(this));\n      this.tick();\n      return;\n    }\n\n    this.ctx.clearRect(0, 0, this.width, this.height);\n\n    const scaleX = scale(this.currentXRange, [0, this.width]);\n    const scaleY = scale(this.currentYRange, [0, this.height]);\n\n    const currBoxWidth =\n      ((this.maxX - this.minX) /\n        (this.currentXRange[1] - this.currentXRange[0])) *\n      this.trueBoxWidth;\n\n    const currBoxHeight =\n      ((this.maxY - this.minY) /\n        (this.currentYRange[1] - this.currentYRange[0])) *\n      this.trueBoxHeight;\n    // Calculate where grid starts so we draw rectangles that are partially offscreen\n    const gridStartX =\n      this.currentXRange[0] -\n      (this.currentXRange[0] % this.trueBoxWidth) -\n      this.trueBoxWidth;\n    const gridEndX =\n      this.currentXRange[1] -\n      (this.currentXRange[1] % this.trueBoxWidth) +\n      this.trueBoxWidth;\n\n    const gridStartY =\n      this.currentYRange[0] -\n      (this.currentYRange[0] % this.trueBoxHeight) -\n      this.trueBoxWidth;\n    const gridEndY =\n      this.currentYRange[1] -\n      (this.currentYRange[1] % this.trueBoxHeight) +\n      this.trueBoxWidth;\n\n    // Only draw rectangles inside viewing window\n    for (let currX = gridStartX; currX < gridEndX; currX += this.trueBoxWidth) {\n      for (\n        let currY = gridStartY;\n        currY < gridEndY;\n        currY += this.trueBoxHeight\n      ) {\n        this.ctx.fillStyle = `rgb(\n          ${this.scaleRed(currY)},\n          0,\n          ${this.scaleBlue(currX)})`;\n        this.ctx.fillRect(\n          scaleX(currX),\n          scaleY(currY),\n          currBoxWidth,\n          currBoxHeight\n        );\n      }\n    }\n\n    this.needsAnimation = false;\n    this.tick();\n    this.lastFrame = requestAnimationFrame(this.animate.bind(this));\n  }\n\n  render() {\n    this.trueBoxWidth = (this.maxX - this.minX) / Math.sqrt(this.count);\n    this.trueBoxHeight = (this.maxY - this.minY) / Math.sqrt(this.count);\n    this.scaleBlue = scale([this.minX, this.maxX], [0, 256]);\n    this.scaleRed = scale([this.minY, this.maxY], [0, 256]);\n\n    if (this.lastFrame) {\n      // Avoid overlapping animation requests\n      cancelAnimationFrame(this.lastFrame);\n    }\n    this.needsAnimation = true;\n    this.animate();\n  }\n}\n\nself.onmessage = OffscreenCanvasWorker.onmessager(self);\n"]}