{"version":3,"sources":["../scripts/utilities.js","../scripts/offscreen-worker.js","../scripts/offscreen-pixi-worker.js"],"names":["scale","domain","range","domainLength","slope","intercept","x","loadShader","gl","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","deleteShader","initShaderProgram","vertexSource","fragmentSource","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","componentToHex","c","hex","toString","length","rgbToHex","r","g","b","parseInt","Number","OffscreenWorker","data","canvas","width","height","receiveState","minX","maxX","minY","maxY","currentXRange","currentYRange","count","controls","needsAnimation","postMessage","self","e","log","engine","render","OffscreenPixiWorker","onmessage","onmessager"],"mappings":"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","file":"offscreen-pixi-worker.18a3d58c.js","sourceRoot":"../src/pages","sourcesContent":["function scale(domain, range) {\n  const domainLength = domain[1] - domain[0];\n  const rangeLength = range[1] - range[0];\n  const slope = rangeLength / domainLength;\n  const intercept = range[1] - slope * domain[1];\n  return (x) => slope * x + intercept;\n}\n\nfunction loadShader(gl, type, source) {\n  const shader = gl.createShader(type);\n\n  gl.shaderSource(shader, source);\n\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    console.error(`Could not compile shader: ${gl.getShaderInfoLog(shader)}`);\n    gl.deleteShader(shader);\n    return null;\n  }\n  return shader;\n}\n\nfunction initShaderProgram(gl, vertexSource, fragmentSource) {\n  const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vertexSource);\n  const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fragmentSource);\n\n  const shaderProgram = gl.createProgram();\n  gl.attachShader(shaderProgram, vertexShader);\n  gl.attachShader(shaderProgram, fragmentShader);\n  gl.linkProgram(shaderProgram);\n\n  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n    console.error(\n      `Unable to initialize the shader program: ${gl.getProgramInfoLog(\n        shaderProgram\n      )}`\n    );\n    return null;\n  }\n\n  return shaderProgram;\n}\n\nfunction componentToHex(c) {\n  var hex = c.toString(16);\n  return hex.length == 1 ? \"0\" + hex : hex;\n}\n\nfunction rgbToHex(r, g, b) {\n  return parseInt(\n    Number(\"0x\" + componentToHex(r) + componentToHex(g) + componentToHex(b)),\n    10\n  );\n}\n\nexport { scale, initShaderProgram, loadShader, rgbToHex };\n","class OffscreenWorker {\n  constructor(data) {\n    this.canvas = data.canvas;\n    this.width = data.canvas.width;\n    this.height = data.canvas.height;\n    this.receiveState(data);\n  }\n\n  receiveState(data) {\n    this.minX = data.minX;\n    this.maxX = data.maxX;\n    this.minY = data.minY;\n    this.maxY = data.maxY;\n    this.currentXRange = [...data.currentXRange];\n    this.currentYRange = [...data.currentYRange];\n    this.count = data.count;\n    this.controls = data.controls;\n\n    this.needsAnimation = true;\n  }\n\n  tick() {\n    postMessage({ type: \"tick\" });\n  }\n\n  animate() {}\n\n  render() {}\n\n  static onmessager(self) {\n    return (e) => {\n      console.log(e);\n      switch (e.data.type) {\n        case \"init\":\n          self.engine = new this(e.data);\n          break;\n        case \"state\":\n          self.engine.receiveState(e.data);\n          break;\n        case \"render\":\n          self.engine.receiveState(e.data);\n          self.engine.render();\n          break;\n        default:\n          console.error(`Received unknown message type: ${e}`);\n      }\n    };\n  }\n}\n\nexport default OffscreenWorker;\n","import { scale } from \"./utilities\";\nimport OffscreenWorker from \"./offscreen-worker\";\n\nclass OffscreenPixiWorker extends OffscreenWorker {\n  constructor(data) {\n    super(data);\n  }\n\n  animate() {}\n\n  render() {}\n}\n\nself.onmessage = OffscreenPixiWorker.onmessager(self);\n"]}